import Mathlib.Order.Birkhoff
import Mathlib.Order.GaloisConnection


/-%%
In this file, we give a complete proof of Birkhoff Duality, that is:

the category of finite distributive lattices with homomorphisms
is dually equivalent to
the category of finite posets with monotone functions.

Throughout the file, let $L$ be a finite distributive lattice,
and $P$ a finite partial order.
%%-/

set_option autoImplicit false

namespace LowerSet

variable (P : Type*)
variable [PartialOrder P] [Fintype P]

open LatticeHom Set

/-%%
\begin{definition}\label{join-irreducible}\lean{SupIrred}
An element $x$ of a finite distributive lattice $L$ is \emph{join-irreducible} if
$x \neq \bot$ and, for every $y, z \in L$ such that $x = y \vee z$, we have
$x = y$ or $x = z$.
\end{definition}

\begin{definition}\label{lower set}\lean{IsLowerSet}
A subset $S$ of a finite partial order $P$ is a \emph{lower set} (also known as \emph{down-set})
if any element that is less than a member of $S$ is also a member of $S$.
\end{definition}

The set of join-irreducible elements of $L$ is a finite poset, when equipped with the
partial order induced by the set of join-irreducible elements.
%%-/

/-%%
The set of lower sets of $P$ is a finite distributive lattice, when equipped with the
operations of union and intersection.
%%-/


/-%%
The dual equivalence, modulo a category-theoretic fact that is already in Mathlib (TODO: find it),
comes down to the following two concrete facts about the assignment (functor) that sends the
finite distributive lattice L to the poset of join-irreducible elements:

First, the assignment is essentially surjective.
\begin{proposition}[Essential surjectivity]\label{EssSurjFinDL}\lean{OrderIso.supIrredLowerSet'}
The function from the poset $P$ to the poset of join-irreducible elements of the distributive
lattice of lower sets of $P$, which sends each $p \in P$ to the lower set generated by $p$,
is a well-defined isomorphism of partial orders.
\end{proposition}
%%-/

open LowerSet

-- This is `LowerSet.supIrred_Iic` with the assumption on `P` relaxed
-- TODO: open PR for this
lemma supIrred_Iic' (a : P) : SupIrred (LowerSet.Iic a) := by
  refine' ⟨fun h ↦ Iic_ne_bot h.eq_bot, fun s t hst ↦ _⟩
  have := mem_Iic_iff.2 (le_refl a)
  rw [← hst] at this
  exact this.imp (fun ha ↦ (le_sup_left.trans_eq hst).antisymm <| Iic_le.2 ha) fun ha ↦
    (le_sup_right.trans_eq hst).antisymm <| Iic_le.2 ha

-- This is `LowerSet.supIrred_iff_of_finite` with the assumption on `P` relaxed
-- TODO: open PR for this
lemma supIrred_iff_of_finite' (s : LowerSet P) : SupIrred s ↔ ∃ a, LowerSet.Iic a = s := by
  refine' ⟨fun hs ↦ _, _⟩
  · obtain ⟨a, ha, has⟩ := (s : Set P).toFinite.exists_maximal_wrt id _ (coe_nonempty.2 hs.ne_bot)
    exact ⟨a, (hs.2 <| erase_sup_Iic ha <| by simpa [eq_comm] using has).resolve_left
      (erase_lt.2 ha).ne⟩
  · rintro ⟨a, rfl⟩
    apply supIrred_Iic'

-- NB cannot put the two simp only's into one!
lemma Iic_order_embedding {a b : P} : LowerSet.Iic a ≤ LowerSet.Iic b ↔ a ≤ b := by
  simp only [← lowerClosure_singleton, lowerClosure_le]
  simp only [lowerClosure_singleton, coe_Iic, singleton_subset_iff, mem_Iic]

-- why is this ' needed here??? mystery.
-- TODO: this is the general form of Birkhoff's representation theorem, where P is only a finite poset, not necessarily a distributive lattice. (see line 160 in Mathlib/Order/Birkhoff.lean)
@[reducible]
def birkhoffLowerSet' (P : Type*) [PartialOrder P] [Fintype P] : P ↪o {s : LowerSet P // SupIrred s} where
  toFun := by
    intro a
    use LowerSet.Iic a
    simp only [supIrred_Iic']
  inj' := by
    intro a b h
    simp_all only [Subtype.mk.injEq, LowerSet.Iic_inj]
  map_rel_iff' := by simp only [Function.Embedding.coeFn_mk, Subtype.mk_le_mk, Iic_le, mem_Iic_iff,
    implies_true]

-- TODO: make this lemma work and build API around it
-- @[simp]
-- lemma bla (a : P) : (birkhoffLowerSet' P) a = { val := LowerSet.Iic a, property := _ } := by sorry

lemma birkhoffLowerSet_surjective : Function.Surjective (birkhoffLowerSet' P) := by
  intro ⟨s, hs⟩
  have : Fintype s := by exact Fintype.ofFinite ↥s
  obtain ⟨a, ha⟩ := (supIrred_iff_of_finite' P s).mp hs
  use a
  simp_rw [← ha]
  apply Subtype.ext
  rfl

noncomputable def OrderIso.birkhoffLowerSet (P : Type*) [PartialOrder P] [Fintype P] :
  P ≃o {s : LowerSet P // SupIrred s} :=
    RelIso.ofSurjective (birkhoffLowerSet' P) (birkhoffLowerSet_surjective P)



/- Filippo's work on Unique -/

def barUnique {s : LowerSet P} (hs : SupIrred s) : Unique {a // LowerSet.Iic a = s} where
  default := sorry
  uniq := sorry

--with `def` the following would have bad reduction properties
abbrev TopGuy {s : LowerSet P} (hs : SupIrred s) : P := (barUnique P hs).default.1

lemma TopUnique {s : LowerSet P} (hs : SupIrred s) (x : {a // LowerSet.Iic a = s}) :
  x = TopGuy P hs := by rw [(barUnique P hs).2 x]--probably there is some API for the `Unique` class that is nicers

lemma TopUnique_prop {s : LowerSet P} (hs : SupIrred s) : (LowerSet.Iic (TopGuy P hs)) = s := by
  rw [(barUnique P hs).default.2]



/-%%
Second, the assignment is a full and faithful functor. We break this up in a number of steps. Throughout the argument, let $L$ and $M$ be finite distributive lattices, and $h : L \to M$ a homomorphism between them.
%%-/

variable (L M : Type) [DistribLattice M] [Fintype M]
variable [DistribLattice L] [Fintype L]
variable (h : LatticeHom L M)

/-%%
(Note: what I would call an adjunction between posets is currently called a "Galois connection" in Mathlib - this choice of terminology is unusual.)
\begin{lemma}
Let $h : L \to M$ be a homomorphism between finite distributive lattices. Then there exists
a left adjoint $f : M \to L$ of $h$.
\end{lemma}
\begin{proof}
Since $L$ and $M$ are finite, they are complete. Now $h$ is a sup-preserving function,
so it has a left adjoint by the adjoint functor theorem (for complete lattices).
\end{proof}
%%-/

lemma leftAdjointExists : ∃ f : M → L, GaloisConnection f h := by sorry


/-%%
\begin{lemma}
Let $f$ be the left adjoint of $h$. For any join-irreducible $p$ of $M$, $f(p)$ is join-irreducible.
\end{lemma}
%%-/
lemma leftAdjointPreservesJoinIrreducible {f : M → L} {hfh : GaloisConnection f h}
  (p : M) (hp : SupIrred p) : SupIrred (f p) := by sorry


/-%%
\begin{proposition}[Fully faithful]\label{FullyFaithfulFinDL}
There is a bijection between the set of homomorphisms $L \to M$ and the set of monotone functions from the poset of join-irreducible elements of $M$ to the poset of join-irreducible elements of $L$.
\end{proposition}

Note that the bijection in the above proposition is even an order-isomorphism, which would be
needed if we wanted to establish a Poset-enriched dual equivalence of categories. But it is not
automatic in Mathlib that LatticeHom L M is a poset, so we do not state this stronger result here.
%%-/

theorem FullyFaithfulFinDL : (LatticeHom L M) ≃ ({a : M // SupIrred a} →o {a : L // SupIrred a})
  := by sorry

/-%%
After proving the above theorems, what remains to be done to formally establish Birkhoff duality
is the application of the category-theoretic fact that any functor that is essentially surjective,
full, and faithful is an equivalence of categories. This is a standard result in category theory,
and is already in Mathlib somewhere.
TODO: where?
%%-/
